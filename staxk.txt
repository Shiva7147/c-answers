#include <stdio.h>
#include <string.h>
#define SIZE 50

char stack[SIZE];
int top = -1;

void push(char c) { stack[++top] = c; }
char pop() { return stack[top--]; }

int main() {
    char str[SIZE], rev[SIZE];
    printf("Enter string: ");
    scanf("%s", str);

    for (int i = 0; str[i]; i++) push(str[i]);
    for (int i = 0; str[i]; i++) rev[i] = pop();
    rev[strlen(str)] = '\0';

    if (strcmp(str, rev) == 0) printf("Palindrome\n");
    else printf("Not Palindrome\n");

    return 0;
}









#include <stdio.h>
#include <string.h>
#define SIZE 50

char stack[SIZE];
int top = -1;

void push(char c) { stack[++top] = c; }
char pop() { return stack[top--]; }

int main() {
    char str[SIZE];
    printf("Enter string: ");
    scanf("%s", str);

    for (int i = 0; str[i]; i++) push(str[i]);
    printf("Reversed: ");
    while (top != -1) printf("%c", pop());
    printf("\n");

    return 0;
}







#include <stdio.h>
#define SIZE 50

int stack[SIZE], top = -1;

void push(int x) { stack[++top] = x; }
int pop() { return stack[top--]; }

int main() {
    int n;
    printf("Enter N: ");
    scanf("%d", &n);

    push(0);
    push(1);

    printf("Fibonacci: %d %d ", stack[0], stack[1]);

    for (int i = 2; i < n; i++) {
        int a = stack[top];
        int b = stack[top-1];
        push(a+b);
        printf("%d ", stack[top]);
    }
    printf("\n");

    return 0;
}






#include <stdio.h>
#define SIZE 50

int stack[SIZE], top = -1;

void push(int x) { stack[++top] = x; }
int pop() { return stack[top--]; }

int main() {
    int n, fact = 1;
    printf("Enter number: ");
    scanf("%d", &n);

    for (int i = n; i >= 1; i--) push(i);
    while (top != -1) fact *= pop();

    printf("Factorial = %d\n", fact);
    return 0;
}




#include <stdio.h>
#define SIZE 50

char stack[SIZE];
int top = -1;

void push(char c) { stack[++top] = c; }
char pop() { return stack[top--]; }
int isEmpty() { return top == -1; }

int main() {
    char exp[SIZE];
    printf("Enter expression: ");
    scanf("%s", exp);

    for (int i = 0; exp[i]; i++) {
        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
            push(exp[i]);
        else if (exp[i] == ')' && stack[top] == '(') pop();
        else if (exp[i] == '}' && stack[top] == '{') pop();
        else if (exp[i] == ']' && stack[top] == '[') pop();
        else { printf("Not Balanced\n"); return 0; }
    }

    if (isEmpty()) printf("Balanced\n");
    else printf("Not Balanced\n");

    return 0;
}







