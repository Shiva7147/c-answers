/*----------------------------------------------
linkedlist.c
Program To Perform Operations On The Linked List
Kavya Kumbhat
09/07/25
-----------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>

typedef struct ListType {
    int Data;
    struct ListType* Next;
} LISTNODE;

LISTNODE* Head = NULL;

// Function Prototypes
void InitList();
void InsertListNode(int Num);
void PrintList(LISTNODE* Head);
int SearchNum(int Num);
int CountNode(LISTNODE* Head);
int DeleteFirstNode();
int DeleteLastNode();
int MaxNum(LISTNODE* Head);
void DeleteNode(int Num);

int main() {
    int choice, n, Num;
    int i;
    InitList();

    do {
        printf("\n------------ LINKED LIST MENU ---------------\n");
        printf("1. Insert list\n");
        printf("2. Print list\n");
        printf("3. Delete the first node\n");
        printf("4. Delete the last node\n");
        printf("5. Display the number of nodes\n");
        printf("6. Display the maximum number\n");
        printf("7. Search a number\n");
        printf("8. Delete a number\n");
        printf("9. Exit\n");
        printf("---------------------------------------------\n");
        printf("Enter Your Choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of elements: ");
                scanf("%d", &n);
                printf("Enter the elements:\n");
                for (i = 0; i < n; i++) {
                    scanf("%d", &Num);
                    InsertListNode(Num);
                }
                break;

            case 2:
                printf("The List Is:\n");
                PrintList(Head);
                break;

            case 3:
                n = DeleteFirstNode();
                if (n != -1)
                    printf("The First Node Deleted Is: %d\n", n);
                break;

            case 4:
                n = DeleteLastNode();
                if (n != -1)
                    printf("The Last Node Deleted Is: %d\n", n);
                break;

            case 5:
                n = CountNode(Head);
                printf("The Number of Nodes In The List Is: %d\n", n);
                break;

            case 6:
                if (Head != NULL) {
                    n = MaxNum(Head);
                    printf("The Maximum Number In The List Is: %d\n", n);
                } else {
                    printf("List is empty.\n");
                }
                break;

            case 7:
                printf("Enter a number to search: ");
                scanf("%d", &n);
                if (SearchNum(n))
                    printf("%d is found in the list.\n", n);
                else
                    printf("%d is not found in the list.\n", n);
                break;

            case 8:
                printf("Enter the number to be deleted: ");
                scanf("%d", &n);
                DeleteNode(n);
                break;

            case 9:
                printf("Exiting program...\n");
                exit(0);

            default:
                printf("Invalid Choice! Please try again.\n");
        }

        printf("\nPress Enter to continue...");
        getchar(); // to clear newline
        getchar();

    } while (1);

    return 0;
}

// Initialize the list
void InitList() {
    Head = NULL;
}

// Insert a new node at the end
void InsertListNode(int Num) {
    LISTNODE *Curr, *Node;
    Node = (LISTNODE*)malloc(sizeof(LISTNODE));
    Node->Data = Num;
    Node->Next = NULL;

    if (Head == NULL) {
        Head = Node;
        return;
    }

    Curr = Head;
    while (Curr->Next != NULL)
        Curr = Curr->Next;

    Curr->Next = Node;
}

// Print the list
void PrintList(LISTNODE *Head) {
    LISTNODE* Curr;
    Curr = Head;

    if (Head == NULL) {
        printf("List is empty.\n");
        return;
    }

    while (Curr != NULL) {
        printf("%d -> ", Curr->Data);
        Curr = Curr->Next;
    }
    printf("NULL\n");
}

// Search for a number
int SearchNum(int Num) {
    LISTNODE* Curr;
    Curr = Head;
    while (Curr != NULL) {
        if (Curr->Data == Num)
            return 1;
        Curr = Curr->Next;
    }
    return 0;
}

// Delete a specific number
void DeleteNode(int Num) {
    LISTNODE *Curr, *Prev;
    Curr = Head;
    Prev = NULL;

    if (Head == NULL) {
        printf("List is empty.\n");
        return;
    }

    // Case 1: delete head
    if (Head->Data == Num) {
        Curr = Head;
        Head = Head->Next;
        free(Curr);
        printf("%d deleted from the list.\n", Num);
        return;
    }

    // Case 2: search the number
    while (Curr != NULL && Curr->Data != Num) {
        Prev = Curr;
        Curr = Curr->Next;
    }

    if (Curr == NULL) {
        printf("%d not found in the list.\n", Num);
        return;
    }

    Prev->Next = Curr->Next;
    free(Curr);
    printf("%d deleted from the list.\n", Num);
}

// Delete first node
int DeleteFirstNode() {
    LISTNODE* Temp;
    int Num;

    if (Head == NULL) {
        printf("List is empty.\n");
        return -1;
    }
    Temp = Head;
    Num = Temp->Data;
    Head = Head->Next;
    free(Temp);
    return Num;
}

// Delete last node
int DeleteLastNode() {
    LISTNODE *Prev, *Curr;
    int Num;

    if (Head == NULL) {
        printf("List is empty.\n");
        return -1;
    }
    if (Head->Next == NULL) {
        Num = Head->Data;
        free(Head);
        Head = NULL;
        return Num;
    }

    Prev = NULL;
    Curr = Head;
    while (Curr->Next != NULL) {
        Prev = Curr;
        Curr = Curr->Next;
    }
    Prev->Next = NULL;
    Num = Curr->Data;
    free(Curr);
    return Num;
}

// Count the nodes
int CountNode(LISTNODE* Head) {
    int count;
    LISTNODE* Curr;

    count = 0;
    Curr = Head;
    while (Curr != NULL) {
        count++;
        Curr = Curr->Next;
    }
    return count;
}

// Find the maximum number
int MaxNum(LISTNODE* Head) {
    int max;
    LISTNODE* Curr;

    max = Head->Data;
    Curr = Head->Next;

    while (Curr != NULL) {
        if (Curr->Data > max)
            max = Curr->Data;
        Curr = Curr->Next;
    }
    return max;
}



/*-----------------------
OrderedLinkedList.c
A Program of Ordered Linked List (Simplified)
Kavya
2/07/25
-------------------------*/

#include <stdio.h>
#include <stdlib.h>

typedef struct ListType {
    int Data;
    struct ListType* Next;
} LISTNODE;

LISTNODE* Head = NULL;

// Function Prototypes
void InitList();
void InsertListNode(int Num);
void DeleteListNode(int Num);
void Reverse();
void PrintList(LISTNODE* Head);

// Main Function
int main() {
    int choice, n, Num, i;

    InitList();

    do {
        printf("\n------------ ORDERED LINKED LIST ---------------\n");
        printf("1. Insert Node(s)\n");
        printf("2. Delete Node\n");
        printf("3. Reverse The List\n");
        printf("4. Display List\n");
        printf("5. Exit\n");
        printf("------------------------------------------------\n");
        printf("Enter Your Choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of elements to insert: ");
                scanf("%d", &n);
                printf("Enter the elements (in any order):\n");
                for (i = 1; i <= n; i++) {
                    scanf("%d", &Num);
                    InsertListNode(Num);
                }
                break;

            case 2:
                printf("Enter the number to delete: ");
                scanf("%d", &Num);
                DeleteListNode(Num);
                break;

            case 3:
                printf("Reversing the list...\n");
                Reverse();
                printf("List reversed successfully.\n");
                break;

            case 4:
                printf("The List is:\n");
                PrintList(Head);
                break;

            case 5:
                printf("Exiting program...\n");
                break;

            default:
                printf("Invalid choice! Try again.\n");
        }

    } while (choice != 5);

    return 0;
}

// Initialize List
void InitList() {
    Head = NULL;
}

// Ordered Insert
void InsertListNode(int Num) {
    LISTNODE *Curr, *Prev, *Node;
    Node = (LISTNODE*)malloc(sizeof(LISTNODE));
    Node->Data = Num;
    Node->Next = NULL;

    // Case 1: Empty list
    if (Head == NULL) {
        Head = Node;
        return;
    }

    // Case 2: Insert at beginning
    if (Num <= Head->Data) {
        Node->Next = Head;
        Head = Node;
        return;
    }

    // Case 3: Insert in correct position
    Curr = Head;
    Prev = NULL;

    while (Curr != NULL && Num > Curr->Data) {
        Prev = Curr;
        Curr = Curr->Next;
    }

    Prev->Next = Node;
    Node->Next = Curr;
}

// Delete a Node
void DeleteListNode(int Num) {
    LISTNODE *Curr, *Prev;
    Curr = Head;
    Prev = NULL;

    if (Head == NULL) {
        printf("List is empty.\n");
        return;
    }

    // Delete head
    if (Head->Data == Num) {
        Curr = Head;
        Head = Head->Next;
        free(Curr);
        printf("%d deleted from the list.\n", Num);
        return;
    }

    // Search and delete
    while (Curr != NULL && Curr->Data != Num) {
        Prev = Curr;
        Curr = Curr->Next;
    }

    if (Curr == NULL) {
        printf("%d not found in the list.\n", Num);
        return;
    }

    Prev->Next = Curr->Next;
    free(Curr);
    printf("%d deleted from the list.\n", Num);
}

// Print List
void PrintList(LISTNODE* Head) {
    LISTNODE* Curr;
    Curr = Head;

    if (Head == NULL) {
        printf("List is empty.\n");
        return;
    }

    while (Curr != NULL) {
        printf("%d -> ", Curr->Data);
        Curr = Curr->Next;
    }
    printf("NULL\n");
}

// Reverse the List
void Reverse() {
    LISTNODE *Prev, *Curr, *Next;
    Prev = NULL;
    Curr = Head;

    while (Curr != NULL) {
        Next = Curr->Next;
        Curr->Next = Prev;
        Prev = Curr;
        Curr = Next;
    }

    Head = Prev;
}
